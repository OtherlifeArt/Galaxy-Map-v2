<!DOCTYPE html>
<html = style="height: 100%;">
	<head>
		<title>Otherlife Art | The Ultimate Star Wars Galaxy Map</title>
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<link rel="stylesheet" href="scripts/leaflet.css">
		<script src="scripts/leaflet.js"></script>
	</head>
	
	<body style="height: 100%;margin: 0;" "background-color:grey;">
		<div id="map" style="width: 100%; height: 100%; background: #000000;"></div>
		<script>
	//Creating the Map
		L.CRS.MySimple = L.extend({}, L.CRS.Simple, {
			transformation: new L.Transformation(0, 2000, -1 / 75, 134)
			
		});
		
		
		L.CRS.pr = L.extend({}, L.CRS.Simple, {
			projection: L.Projection.LonLat, //Equirectangular or Plate Carree projection (directly maps X as longitude, y as latitude)
			transformation: new L.Transformation(1, 0, 1, 0),
			
			scale: function(zoom) {
			return Math.pow(1, zoom);
			

			},

		zoom: function(scale) {
			return Math.log(scale) / Math.LN2;
		},

		distance: function(latlng1, latlng2) {
			var dx = latlng2.lng - latlng1.lng,
				dy = latlng2.lat - latlng1.lat;

			return Math.sqrt(dx * dx + dy * dy);
		},
		infinite: true
		});
	
	//Adds tiles to map, Sets zoom limits, Sets where map view starts out centered
		var map = L.map('map', {crs: L.CRS.Simple}).setView([-121.75, 124.625], 0);
		L.tileLayer('map/{z}/{x}/{y}.png', {
			continuousWorld: false,
			noWrap: true,	
			minZoom: 3,
			maxZoom: 7,
		}).addTo(map);
		
		L.control.scale().addTo(map);
		
	//Draggable Coordinate Finder Marker
		var marker = L.marker([0, 0], {
			draggable: true,
		}).addTo(map);
		
	//Icons
		var planetIcon = L.icon({
		iconUrl: 'planet-normal.png',
		shadowUrl: 'planet-shadow.png',

		iconSize:     [10, 10], // size of the icon
		shadowSize:   [10, 10], // size of the shadow
		iconAnchor:   [5, 5],   // point of the icon which will correspond to marker's location
		shadowAnchor: [5, 5],   // the same for the shadow
		popupAnchor:  [-5, -20] // point from which the popup should open relative to the iconAnchor
		});
	
	<!-- //Labels -->
	
	
	//Markers
	//	var coruscant = L.marker([0, 0], {icon: planetIcon,}).bindTooltip('<b>Coruscant</b>').addTo(map);
		var coruscant = L.marker([0, 0], {icon: planetIcon,}).bindTooltip('<b>Coruscant</b>', {permanent: true, direction : 'bottom'}).addTo(map);

		var alderaan = L.marker([24.37, -1.579], {icon: planetIcon,}).bindTooltip('<b>Alderaan</b>').addTo(map);
		var corellia = L.marker([-26.37, -2.579], {radius: 20}).bindPopup('<b>Corellia</b>').addTo(map);
		var commenor = L.marker([-28.21, -1.24],  {icon: planetIcon}).bindTooltip("Commenor").addTo(map);
		

		//Returns coordinates for Draggable Marker
		marker.bindPopup('LatLng Marker').openPopup();
		marker.on('dragend', function(e) {
			marker.getPopup().setContent(marker.getLatLng().toString()).openOn(map);

		});
		
		//L.CircleMarker.include({
		//	bindTooltip: function (content, options) {
		//		if (!this._label || this._label.options !== options) {
		//			this._label = new L.Label(options, this);
		//		}

		//		this._label.setContent(content);
		//		this._labelNoHide = options && options.noHide;

		//		if (!this._showLabelAdded) {
		//			if (this._labelNoHide) {
		//				this
		//					.on('remove', this.hideLabel, this)
		//					.on('move', this._moveLabel, this);
		//				this._showLabel({latlng: this.getLatLng()});
		//			} else {
		//				this
							//.on('mouseover', this._showLabel, this)
							//.on('mousemove', this._moveLabel, this)
							//.on('mouseout remove', this._hideLabel, this);
		//				if (L.Browser.touch) {
							//this.on('click', this._showLabel, this);
		//				}
		//			}
		//			this._showLabelAdded = true;
		//		}

		//		return this;
		//	},

		//	unbindTooltip: function () {
		//		if (this._label) {
		//			this._hideLabel();
		//			this._label = null;
		//			this._showLabelAdded = false;
		//			if (this._labelNoHide) {
		//				this
		//					.off('remove', this._hideLabel, this)
		//					.off('move', this._moveLabel, this);
		//			} else {
		//				this
		//					.off('mouseover', this._showLabel, this)
		//					.off('mousemove', this._moveLabel, this)
		//					.off('mouseout remove', this._hideLabel, this);
		//			}
		//		}
		//		return this;
		//	}
		//});


		L.marker([23.37, 1.579]).bindTooltip('Look revealing label!').addTo(map);

		</script>
	</body>
</html>